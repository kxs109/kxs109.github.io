<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[熟练运用Dagger2(一)]]></title>
    <url>%2F2019%2F03%2F05%2F%E7%86%9F%E7%BB%83%E8%BF%90%E7%94%A8Dagger2(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[Dagger2出来好久了，网上好多分析这个框架的文章，但那都是别人头脑的思路写出来的东西，只有融入了自己思想去理解的东西才是真的理解了。其实在Android架构中，这个框架也可以没必要采用。但是还是有必要了解和学习其中的原理。 首先我们要理解依赖注入：类A里面有类B的引用，类A叫依赖类，类B叫目标类。B可以直接在A里面new出来，也可以在A中提供带参数B类型的set(B b)函数将B设置到A类里面。这是我们最常用的依赖注入，代码中到处可见。这两种依赖虽然很常见，但是比如我们要修改B的构造器，那么所有用到的地方都要做修改。Dagger2提供了一种新的依赖方式]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[是时候来一发Android组件化项目了]]></title>
    <url>%2F2019%2F01%2F03%2F%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E4%B8%80%E5%8F%91Android%E7%BB%84%E4%BB%B6%E5%8C%96%E9%A1%B9%E7%9B%AE%E4%BA%86%2F</url>
    <content type="text"></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OkHttp3源码分析第一回之请求过程]]></title>
    <url>%2F2019%2F01%2F03%2FOkHttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E5%9B%9E%E4%B9%8B%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[有关Android网络请求的开源库有很多，而OkHttp无疑是最优秀的网络请求库，它几乎能高效完美处理各种复杂的Http请求。说实话，这个库还是很值得去阅读它的源码的。所以我们今天来分析一下它的源码吧。本文基于OkHttp版本3.11.0。部分代码使用Kotlin语言来编写。 一. OkHttp执行请求首先我们来构建两次（一个同步，一个异步）简单的请求： 1234567891011121314151617181920212223242526fun testOkHttp(url: String) &#123; //配置OkHttpClient所需的一些参数到一个Builder里面 val builder = OkHttpClient.Builder() .connectTimeout(15, TimeUnit.SECONDS) .readTimeout(15, TimeUnit.SECONDS) .writeTimeout(15, TimeUnit.SECONDS) //然后用该builder创建一个OkHttpClient val client = builder.build() //构建一个请求 val request = Request.Builder() .url(url) .build() //1.执行同步请求，请求执行和返回结果在同一个线程 //同步请求结果 val responseExecute: Response? = client.newCall(request).execute() //2.执行异步请求，请求执行和返回结果不在同一个线程，返回结果以回调的方式 client.newCall(request).enqueue(object : Callback &#123; override fun onFailure(call: Call?, e: IOException?) &#123; &#125; override fun onResponse(call: Call?, response: Response?) &#123; //异步请求结果 val responseEnqueue: Response? = response &#125; &#125;) &#125; 以上代码，我们揪出几个点，然后逐一击破来了解OkHttp请求的整个过程。 OkHttpClient构建 newCall方法 Call接口和它的子类RealCall 同步请求execute() 异步请求enqueue() Dispatcher调度 二. 源码分析1. OkHttpClient构建我们先看OkHttpClient类，该类提供了两个构造器: 123public OkHttpClient() &#123; this(new Builder()); &#125; 我们可以直接使用OkHttpClient构造器来创建一个实例，它会直接调用兄弟构造器： 12345OkHttpClient(Builder builder) &#123; this.dispatcher = builder.dispatcher; this.proxy = builder.proxy; ...&#125; 它使用的的参数是Builder里面默认设置的参数： 12345678910111213141516171819202122232425public Builder() &#123; dispatcher = new Dispatcher(); protocols = DEFAULT_PROTOCOLS; connectionSpecs = DEFAULT_CONNECTION_SPECS; eventListenerFactory = EventListener.factory(EventListener.NONE); proxySelector = ProxySelector.getDefault(); if (proxySelector == null) &#123; proxySelector = new NullProxySelector(); &#125; cookieJar = CookieJar.NO_COOKIES; socketFactory = SocketFactory.getDefault(); hostnameVerifier = OkHostnameVerifier.INSTANCE; certificatePinner = CertificatePinner.DEFAULT; proxyAuthenticator = Authenticator.NONE; authenticator = Authenticator.NONE; connectionPool = new ConnectionPool(); dns = Dns.SYSTEM; followSslRedirects = true; followRedirects = true; retryOnConnectionFailure = true; connectTimeout = 10_000; readTimeout = 10_000; writeTimeout = 10_000; pingInterval = 0; &#125; 当然了，我们也可以不采用默认的Builder参数，像开头代码示例一样先构建一个Builder，我们在Builder里面自由设置自己的配置参数，然后再build出一个OkHttpClient实例： 123public OkHttpClient build() &#123; return new OkHttpClient(this); &#125; 我们可以这么理解，OkHttpClient里需要的配置太多了，采用建造者设计模式可以让调用者灵活配置一个自己的OkHttpClient。 2. newCall方法我们先看newCall方法： 123@Override public Call newCall(Request request) &#123; return RealCall.newRealCall(this, request, false /* for web socket */); &#125; 这是一个重写了Call接口的内部接口Factory的call方法，然后调用的是RealCall的newRealCall方法。RealCall类实现了Call接口，newRealCall方法返回了一个Call类型的实例。所以到目前为止，我们知道同步请求execute()和异步请求enqueue()实际是在Call接口的子类RealCall中执行的。那我们接下来重点来了解一下这个Call接口和它的子类RealCall。 3. Call接口和它的子类RealCall123456789101112public interface Call extends Cloneable &#123; ... //同步请求，直接返回Response Response execute() throws IOException; //异步请求，通过回调返回Response void enqueue(Callback responseCallback); ... //OkHttpClient中的newCall()方法是继承这个内部接口来实现的 interface Factory &#123; Call newCall(Request request); &#125;&#125; 可以看到Call接口向外部暴露了一个工厂接口来”生产”自己，是不是很熟悉的工厂设计模式中的工厂接口设计。Call接口只有一个子类RealCall类，我们直接调到RealCall类中来看重头戏execute()和enqueue()。 4. 同步请求execute()直接上源码分析： 1234567891011121314151617181920212223@Override public Response execute() throws IOException &#123; synchronized (this) &#123; //只能调用一次 if (executed) throw new IllegalStateException("Already Executed"); executed = true; &#125; captureCallStackTrace(); eventListener.callStart(this); try &#123; //又跑到dispatcher.executed(),黑人问号脸？ client.dispatcher().executed(this); //重点，这里开始执行请求了并直接返回结果 Response result = getResponseWithInterceptorChain(); if (result == null) throw new IOException("Canceled"); return result; &#125; catch (IOException e) &#123; eventListener.callFailed(this, e); throw e; &#125; finally &#123; //最后跑到dispatcher调用了finished() client.dispatcher().finished(this); &#125; &#125; 直接总结： 1.execute()只能被调用一次。 2.client.dispatcher().executed(this);这句干了什么？ 1234private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();synchronized void executed(RealCall call) &#123; runningSyncCalls.add(call); &#125; 并没有很多动作，仅仅将这个Call加入到队列runningSyncCalls中。后面我们再来说说这个队列的事。 3.Response result = getResponseWithInterceptorChain();这里才是真正干活了。 getResponseWithInterceptorChain()源码： 12345678910111213141516171819Response getResponseWithInterceptorChain() throws IOException &#123; // Build a full stack of interceptors. List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;(); interceptors.addAll(client.interceptors()); interceptors.add(retryAndFollowUpInterceptor); interceptors.add(new BridgeInterceptor(client.cookieJar())); interceptors.add(new CacheInterceptor(client.internalCache())); interceptors.add(new ConnectInterceptor(client)); if (!forWebSocket) &#123; interceptors.addAll(client.networkInterceptors()); &#125; interceptors.add(new CallServerInterceptor(forWebSocket)); Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0, originalRequest, this, eventListener, client.connectTimeoutMillis(), client.readTimeoutMillis(), client.writeTimeoutMillis()); return chain.proceed(originalRequest); &#125; 上面代码先是添加了各种拦截器。先加一些从okHttpClient外部配置的一些拦截器，如果你用过OkHttpClient+Retrofit2，你很容易想到我们构建OkHttpClient的Builder的时候是会加一些我们自定义的拦截器的(这些我们自定义的拦截器是最先上车的)，后面又加一些OkHttp自带的拦截器：RetryAndFollowUpInterceptor…(我们先忽略掉这些拦截器，这正是这个库设计的精髓，这是后面我们要重点分析的东西，这一回合我们只分析请求过程)。这些裹上各种拦截器的请求作为一个最终的请求去服务器端申请数据了。 4.client.dispatcher().finished(this); 这里finished调用的是Dispatcher类的finish方法。同步请求里面没有过多操作，只是移除请求结束后将该请求从runningSyncCalls队列中移除。 123456789101112131415161718192021222324252627282930/** Used by &#123;@code AsyncCall#run&#125; to signal completion. */ void finished(AsyncCall call) &#123; finished(runningAsyncCalls, call, true); &#125; /** Used by &#123;@code Call#execute&#125; to signal completion. */ void finished(RealCall call) &#123; finished(runningSyncCalls, call, false); &#125;private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) &#123; int runningCallsCount; Runnable idleCallback; synchronized (this) &#123; //将该请求从runningSyncCalls队列中移除 if (!calls.remove(call)) throw new AssertionError("Call wasn't in-flight!"); //同步请求结束不会执行 promoteCalls() if (promoteCalls) promoteCalls(); //返回同步请求队列和异步请求队列里面的请求总数 runningCallsCount = runningCallsCount(); idleCallback = this.idleCallback; &#125; //下面这个if判断基本不会执行。因为源码中idleCallback一直为空 if (runningCallsCount == 0 &amp;&amp; idleCallback != null) &#123; idleCallback.run(); &#125; &#125;public synchronized int runningCallsCount() &#123; return runningAsyncCalls.size() + runningSyncCalls.size(); &#125; 至此，同步请求的过程我们大概明白了。请求执行时在RealCall中直接通过getResponseWithInterceptorChain()执行的，返回的结果也是在创建RealCall的线程中。Dispatcher中只是将请求加入正在运行的同步队列中。请求结束后最终调用finished()方法来移除已经结束的请求。 5. 异步请求enqueue()跑到Dispatcher类里面去执行异步请求了： 12345678910@Override public void enqueue(Callback responseCallback) &#123; synchronized (this) &#123; if (executed) throw new IllegalStateException("Already Executed"); executed = true; &#125; captureCallStackTrace(); eventListener.callStart(this); //调用Dispatcher里面的enqueue方法，并传入一个AsyncCall对象 client.dispatcher().enqueue(new AsyncCall(responseCallback)); &#125; enqueue()里面做了两件事，判断条件合格，将请求加入正在运行的异步队列，否则，将请求加入等待的异步队列。 123456789synchronized void enqueue(AsyncCall call) &#123; //如果正在运行的异步队列请求数&lt;64&amp;&amp;同一主机请求数&lt;5,执行下面操作，将当前请求加入正在运行的异步队列，线程池开始执行请求。 if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123; runningAsyncCalls.add(call); executorService().execute(call); &#125; else &#123; readyAsyncCalls.add(call); &#125; &#125; 先看下AsyncCall类，这是RealCall的内部类： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647final class AsyncCall extends NamedRunnable &#123; private final Callback responseCallback; AsyncCall(Callback responseCallback) &#123; super("OkHttp %s", redactedUrl()); this.responseCallback = responseCallback; &#125; String host() &#123; return originalRequest.url().host(); &#125; Request request() &#123; return originalRequest; &#125; RealCall get() &#123; return RealCall.this; &#125; //又看到了熟悉的execute()方法 @Override protected void execute() &#123; boolean signalledCallback = false; try &#123; //这里跟同步请求一样 Response response = getResponseWithInterceptorChain(); if (retryAndFollowUpInterceptor.isCanceled()) &#123; signalledCallback = true; responseCallback.onFailure(RealCall.this, new IOException("Canceled")); &#125; else &#123; signalledCallback = true; //这里将response传到回调里面 responseCallback.onResponse(RealCall.this, response); &#125; &#125; catch (IOException e) &#123; if (signalledCallback) &#123; // Do not signal the callback twice! Platform.get().log(INFO, "Callback failure for " + toLoggableString(), e); &#125; else &#123; eventListener.callFailed(RealCall.this, e); responseCallback.onFailure(RealCall.this, e); &#125; &#125; finally &#123; //这里也跟同步请求一样调用finished()方法。不过具体执行可不一样。 client.dispatcher().finished(this); &#125; &#125; &#125; 调到Disptacher类里面来看finished()方法，与同步不一样的是，这里调用了promoteCalls()方法。其实promoteCalls()方法相当于将结束的请求移除，然后推动下一个请求，直到队列里面没有请求了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void finished(AsyncCall call) &#123; finished(runningAsyncCalls, call, true); &#125;private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) &#123; int runningCallsCount; Runnable idleCallback; synchronized (this) &#123; if (!calls.remove(call)) throw new AssertionError("Call wasn't in-flight!"); //异步请求走了if判断 if (promoteCalls) promoteCalls(); runningCallsCount = runningCallsCount(); idleCallback = this.idleCallback; &#125; if (runningCallsCount == 0 &amp;&amp; idleCallback != null) &#123; idleCallback.run(); &#125; &#125;private void promoteCalls() &#123; //如果异步队列里面请求数超过64了，return if (runningAsyncCalls.size() &gt;= maxRequests) return; //如果等待的异步队列里面是空的，return if (readyAsyncCalls.isEmpty()) return; //那么异步队列里面请求数不满64&amp;&amp;等待的异步队列里面还有等待的请求，就开始执行下面操作 for (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123; AsyncCall call = i.next(); //如果请求同一个主机数&lt;5,等待队列先remove当前请求，其实就是结束的请求，然后异步队列加入等待队列中的下一个请求，线程池开启一个线程开始执行这个刚加入的请求。 if (runningCallsForHost(call) &lt; maxRequestsPerHost) &#123; i.remove(); runningAsyncCalls.add(call); executorService().execute(call); &#125; if (runningAsyncCalls.size() &gt;= maxRequests) return; &#125; &#125;private int runningCallsForHost(AsyncCall call) &#123; int result = 0; for (AsyncCall c : runningAsyncCalls) &#123; if (c.get().forWebSocket) continue; if (c.host().equals(call.host())) result++; &#125; return result; &#125; 整个过程其实非常明了了。请求是通过Dispatcher类里面的线程池来推动的，执行一个AsyncCall任务，AsyncCall来执行请求getResponseWithInterceptorChain()，整个请求过程是发生在线程池中的，请求返回的结果是通过ResponseCallback回调传到外面(这里的外面一般指主线程)。请求的时候是先判断条件加入到正在运行的异步队列，请求结束后调用promoteCalls()移除当前结束的线程并还存在下一个请求的条件下，再次调用Dispatcher类里面的线程池推动下一个请求。]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
  </entry>
</search>
